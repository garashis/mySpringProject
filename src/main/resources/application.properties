## Spring DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
## https://www.callicoder.com/spring-boot-rest-api-tutorial-with-mysql-jpa-hibernate/
spring.datasource.url = jdbc:mysql://freedb.tech:3306/freedbtech_mydbnew?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
#spring.datasource.username = freedbtech_garashisnew
#spring.datasource.password = gaurav1@
spring.datasource.username = ${dbusername}
spring.datasource.password = ${dbpassword}


## Hibernate Properties
# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect

# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto = update


# Hibernate is a JPA implementation, while Spring Data JPA is a JPA Data Access Abstraction.
# Spring Data offers a solution to GenericDao custom implementations.
# It can also generate JPA queries based on method name if conventions are followed.

# With Spring Data, we can use any JPA provider like Hibernate, Eclipse Link,.
# The biggest benefit is that we can control transaction boundaries declaratively using the @Transactional annotation.

# Spring Data JPA is not an implementation or JPA provider,
# it's just an abstraction used to significantly reduce the amount of boilerplate code required to implement data access layers for various persistence stores.

# Hibernate provides a reference implementation of the Java Persistence API which makes it a great choice as an ORM tool with benefits of loose coupling.

